* meeting minutes
** meeting 2019.09.04 (first) (1Hr)
   - going over project pdf as group
     - discussing tech stack
     - going over sprint assignments
     - going over normal assignments
   - discussing the actual structure of sprint 1
     - requirements
     - user stories
     - what submission might look like
     - discussion of who gets to do what
     - discussion of when to meet, general availability
       - Sam will be gone from 9th through 19th
       - Elias will be gone through the 12th - 14th
*** TODO project 1 report 
    DEADLINE: <2019-09-20 Fri>
    - want to get scrum documentation done
    - get general idea down by end of this friday (2019.09.06)
      - structure of the project
      - how to use the frameworks/libraries involved (personal research/reading
        per individual)
        - Neon for rust
        - node.js
        - potentially express.js
    - generating cards, user stories
*** TODO functionality of sprint 1
    DEADLINE: <2019-10-02 Wed>
    - finish the functional/technical components of the project
    - TBD
** meeting 2019.09.06 (second) (1Hr)
*** agenda
    - discussing game rules
    - discussing/writing user stories
    - discussing tooling
    - discussing design
*** game rules
    - watched a video demo'ing the game
    - discussed/clarify mechanics
      - whether or not to include coin flip
      - terms of loss
      - flying mechanic
*** User stories
    - elias wrote user stories in a new org mode file called kanban.org on the
      repository
    - discussed problem of documentation given requirements from the pdf for
      sprint 1
    - discussed alternative means of documenting, carrying out execution of our
      cards for the project
*** tooling & design
    - did not achieve agenda, did not get to these topics because of the time
      it took to discuss our epics/user stories.
*** TODO discuss tooling
    - need to finalize what our stack will look like and frameworks to be
      used.
    - elias has experimented with Neon and reports that it works well, seems
      viable for the product.
*** TODO discuss design
    - need to discuss how the actual product will be packaged and its
      architecture.
** meeting 2019.09.27 (third) (1Hr30m)
*** agenda
    - discuss project structure
    - acceptance criteria
    - work assignment
    - remaining TODOs
*** project structure
    - express.js has a lot of dependencies, only really need connect.js
      + might try just using connect.js, which would be a lot simpler
      + will continue with using Neon
    - board
      + gui
        - js renders the fontend
        - logic/data is all handled on back
      + data structure/representation
        + two choices:
          1. one big board object that includes methods for both resolving where players are *and*
             where things like mills are
          2. two object entities, one is purely for the GUI (tracking positions on the board), the
             other would be some kind of graph structure that allows position nodes to check peers
             for occupation and whether it is the same or opposing players
      + movement and move validity
        - need to track flying
          + proposition: flying is a universal property, merely constrained until player count is
            reduced.
            - need some kind of getter/setter between board and entity management system
          + mill detection
            - if going with entity system, would merely be a graph traversal from any given node
            - another idea: create a mill entity system that tracks active mills and checks each
              mill upon each turn(?) and modifies or destroys the mill as necessary.
              + could save a lot of checking
              + as for organization/logical membership, would keep such a mill entity system
                independent of other objects in the system for simplicity, at least for now.
          + Checking for attack
            - if a mill entity system is used, we natively have a means to detect valid attacks. so
              long as the node is not in one of the mills, do not attack *unless* all available
              nodes are in mills.
      + game driver
        - Will have some kind of Game entity/manager object that drives the game event loop.
          + will take inputs from players, run them as game moves
            + however, internal logic to the entity management system is what will ultimately validate moves
            + game manager will have no logic for why this happens, only passes back and for game
              inputs and the results of moves.
          + consequentially, need to codify where and how game validation logic happens
      + validation logic
        - as of now, think it will be handled by the main entity management system
        - will have a set of logic checking methods defined over the system that verify whether a
          given move is allowed
*** acceptance criteria
    - realized we need to add numbering to the board GUI (a-g, 1-7)
    - (deferred, Sam will begin working on before next meeting)
*** work assignment
    - elias will begin on exploratory work for the backend (board, entity management, etc)
    - sam, michael will begin exploratory work for the frontend (GUI, communicating with backend)
*** remaining todos
**** TODO kanban board setup, finalization of workflow for documentation
     - can probably just use github for real time management, but keep organizational and notes in
       =kanban.org= file on the repo.
**** TODO defining test cases for stories and acceptance criteria
**** TODO refining stories
     - same case applies with above: refine stories, and put them on github's project management
       board accordingly; actual refinement can be delegated to within =kanban.org= file.
** meeting 2019.10.02 (fourth) (1Hr40m)
*** Agenda
    - addressing tagged issues generated on GitHub
    - settling on how front-end talks to back-end
    - documentation/design stuff
*** issues on GitHub
**** issue #3: determine communication channel between js and rust
     - event polling seems overkill for what we need
     - even handler on front-end which speaks to an entity ManagerGlue, which will be the JS that
       talks to rust backend
       + There will be a manager in the back-end, which will generate game state, and return that to
         the front-end
       + back-end will also have triggers (flags? Enums?) which signal to front-end when certain
         actions are no longer needed or valid, i.e. button inputs or game state continuation
     - JSON seems like a good enough medium for message passing between front and back components
***** issue #4 is largely tagged to #3, so this resolves that
      - =State=: Input Handle + BoardStruct + Trigger)
        + BoardStruct: struct
        + InputHandle: Enum
          * Piece switch (moving a piece out of position, destination not known)
          * (invalid) piece switch
          * Piece being placed
          * (invalid) piece being placed
        + Trigger: Enum
          * None
          * Phases, i.e. stages of game
            - startgame (menu?)
            - player selection (1 human vs computer, 2 human, etc)
            - Placing Pieces
            - Elimination
            - Flying
            - Endgame (menu?)
      - =BoardState=
        + this is what gets sent back to the JS
        + 1D array of the =State= struct
          - this array will be handed off as a NeonJS object, whatever it's called in neon
**** issue #6: Front-end/GUI Skeleton, Basic Design
     1. Neon builds a node module
     2. This is sent to express.js
        - accepts it as a bunch of js functions
     3. Express takes this, as a bunch of objects, and then saves as strings to JS files, in turn
        statically served to end user (i.e. browser)
        - express.js interaction is a one-off affair
     4. Stretch goal: being able to set different themes on the front-end
**** issue #8: CI/CD
     - GitHub has native CI/CD now via it's Action's service.
     - can impl for both Rust and Node.js
*** design docs:
    - at least 3 needed:
      1. event diagram
      2. general UML diagram for total project
      3. class hierarchy/component diagram
** meeting 2019.10.03 (fifth) (1Hr53m)
*** agenda
     - how to branch
     - branching basic_gui
     - GitHub PR format
     - styling format
*** GitHub PR format
     - Show Michael how to create a branch
     - name the branch and pull from remote
     - push the branch from local
     - sync branches
     - checkout a branch
*** branching basic_gui
     - created a branch \`basic_gui\`
     - set up an issue with the branch for PR
     - push a commit from local to remote branch
*** GitHub PR format
     - went through how to form a PR from different branches
     - how to further commit to the compare branch
*** styling format
     - no bootstrap, no jquery
     - setup proper layouts for the GUI
     - discussed how we want to handle events onclick
*** TODO
     - push scaffolds for the website GUI
     - handle basic logic for pushing items to back-end storage
     - create mock of Rust functionality in TypeScript for further discussion
** meeting 2019.10.05 (sixth) (1Hr16m)
*** agenda
     - CSS Grid
     - SASS
     - TypeScript
     - build script compilation and runtime
     - proper layout for GUI
*** CSS Grid
     - teach Michael about CSS Grid
     - pure CSS, not bootstrap (Elias)
     - use columns properly
     - no need for floats / flexbox
*** SASS
     - transpiler for CSS
     - allows nested functionality
     - separate compiled/uncompiled folders
     - use \`watch\` script to sync changes
*** TypeScript
     - better able to handle equivalence mocking to Rust
     - easy to push onto browser
     - separate folders (see above)
     - push to public folder for site access
*** build script compilation and runtime
     - use watch and start scripts to build site
     - separate scripts will be run for Rust beforehand
     - build scripts allow for synced changes between folders (see above)
*** proper layout for GUI
     - use column areas in CSS Grid
     - main column for game
     - nested grid for board layout (tentative)
     - proportion text for board side-by-side
*** TODO
     - design docs
     - microcharter
     - mocking TS => Rust
     - event keys on front-end (browser)
** meeting 2019.10.06 (seventh) (>7hr)
*** Agenda
    - Tying up loose ends with respect to documentation and write up
    - Tying up loose ends with respect to UI/JS end of the application
    - Discussing what is left to do with the project
*** Documentation and Write-up
    - Figured out how to format the tables given that many of the ones provided do not play well
      with latex/org-mode markdown
    - Similarly, decided on how to interconnect documentation components between sections
    - Discussed the remaining things left undocumented, particularly pair ratings.
*** UI/JS Loose Ends
    - Complete manual testing of interacting elements
    - Finalize positions of clickable elements on the board grid.
    - Alternating player logic for placement of pieces.
    - Limiting piece placement to nine.
*** Discussing Future Sprint/Direction of Project
    - Current User Stories are pseudo-Epics and need to be refined into better User stories aside
      from [[#SID1][S1]]. As they stand, discussing the current user stories makes for overly generic/abstract
      discussion and doesn't meaningfully translate into logic/behavior to implement and actual
      engineering tasks.
    - Currently, the front end mocks all of the behavior/functionality that would otherwise be
      provided by the backend. In sprint 2, this is where the real meat of programming will come in
      as we learn to make the back-end and front-end interface, particularly with translating data
      types across the FFI boundary through Neon.
    - We need to improve the current state documentation massively.
      + Design diagrams.
      + Docstrings across software code base.
      + Event diagrams.
    - Translate the above issues into their proper documentation for the master documentation and
      write-up file.
    - How to test more of the functionality given that a major component of this application is
      running directly on the browser.
** meeting 2019.10.11 (eighth) (2hr)
*** agenda
    - review sprint 1
      + bugs
    - roadmap sprint 2
      + outline what is needed
      + setup project board
      + issues
      + interface between front/end
*** review of sprint 1
    - GUI
      + coordinate system
      + testing was not fun w/ current setup
    - backend
      + types, not much else
    - documentation
      + implemented a decent workflow for putting together and compiling a documentation artifact
        for submission
    - complains
      + mostly just not having enough meetings despite getting 6 of them in before deadline.
        * had one right before submission, was clearly heavily crunch oriented.
        * documentation was a major pain point given the ratio of code/work to actual required
          documentation.
*** sprint 2 roadmap 
**** bugs
     - Wrong current player display
     - Bad formatting of org mode files on GH
       + won't fix bc final artifact pdf, that looks fine
     - Bad formatting of code inputs/outputs on manual tests within tables as currently.
**** submission requirements of Sprint 2
     - full human player vs human player functionality
       + piece movement
       + piece elimination
       + mill formation
       + (optional) piece flying
       + end game
     - All proper documentation wrt to above new functionality and its implementation
       + User story refinements
         * side note: this is actually more sizeable then what it appears
       + AC and respective refinements
         * at least one manual *or* automatic
       + all test code and documentation
         * aside from manual/automatic requirements, all units of code should have a accompanying
           unit test.
**** project board (backlog/requirement refinement)
     1. Front End -> Backend communication
        - JS speaks to rust
          + Struct will have a position struct and an event enum that dictates to backend what to
            do next.
          + let's call this object a =PushEventStruct=
          + This represents the attempted inputs/moves of the current player
     2. Backend -> Front end communication
        - backend runs actual logic and validation
        - upon receiving a =PushEventStruct=, the back-end:
          1. Does a validation:
             - Checks whether requested action is valid in the current game state
             - When not valid, immediate returns:
               1. Original =BoardStruct=
               2. =InputHandle= -> Error that rust handles, and returns "none" to JS
               3. =Trigger= dependent on game state transition
          2. Game Manager handles event:
             - Processes game events and generates resulting new game state
          3. Back-end returns new =State=, where:
             - =InputHandle= is =Success=
             - =BoardStruct= is the new =State=
             - =Trigger= of the condition of the phase is satisfied
               + =none=
               + =elimination=
               + =flying=
               + =gameover=
     3. Proper GUI styling
        - Add Game meta information
          + how many pieces left for each player
          + current phase (turn)
          + (optional/idea) GUI indicates existing mills
        - game menu
          + theme options
          + game options
          + how to play
        - mobile/responsive design
**** snow plow form sprint 1
     1. design docs
     2. Development Workflow
        - CI/CD with GitHub Actions
          + CI
            * need front-end GH Action
            * need back-end GH Action
            * figure out action for integration between front/back components
        - Development environment documentation
          + How to setup local machine to build both the front and back-end
** meeting 2019.10.25 (ninth) (2 hr)
   - Duration: 2 hours
   - Location: Miller Nichols Library
*** Agenda
    - new project format
    - testing
      + server
      + gui
      + unit testing
    - interop/ffi/interfaces
      + managerGlue
    - general development/programming
*** project format
    - rust projects using neon have a default layout
      + not friendly for testing the rust specific code
      + similarly, not friendly for testing the node/js/front-end code not involved with rust
        exported module
    - solution: rust workspaces
      + simply change top level to have cargo file with workspace member declarations
      + well documented here: https://github.com/neon-bindings/examples/tree/master/workspace
    - benefits:
      + can now run rust tests independent of node/js via traditional ~cargo test~ and ~cargo check~
      + furthermore, now have backend code organized as:
        #+begin_verse
        .
        ├── Cargo.lock
        ├── Cargo.toml
        ├── lib
        │   └── index.js
        ├── native
            ├── artifacts.json
            ├── base
            │   ├── Cargo.toml
            │   └── src
            ├── build.rs
            ├── Cargo.toml
            ├── index.node
            ├── src
            │   └── lib.rs
            └── target
        #+end_verse
      + This allows us to move all logic into a sub-crate, =base=, which is private and internal to
         the backend. An API for the module that provides the backend functionality is the only thing
         exposed in the main ~native/src/lib.rs~ file, which is what is compiled and exported to node.
        - i.e. we keep our code enapsulated and enforce demeter's law
      + finally, means all integrations tests on node side only test the actual interopability logic
        and functionality rather than any of the rust specific code and logic.
*** testing
    - ibid project format for overall structure's effect on testing approach
    - server (node):
      + no browser tests
      + check if all functions are translated properly
        * node functions get translated to plaintext js functions
      + request testing
        * extra assets (GET stuff)
        * further research/parking lot:
          - coop and multiple clients
    - gui (client stuff):
      + test functions within test module:
        * master functions that assert all tests at instantiation
        * i.e. when browser pulls the plain js
        * pull from dev endpoint
      + manual testing:
        * automated testing on browser is pretty bad/gross
        * getting setup not really worth it, so opting for manual tests as necessary.
      + three layer testing (~eventPress~):
        * log input events from divs
        * validation testing on newly retrieved ~BoardState~
    - unit testing:
      + *reminder*: 1:1 ratio between functions and tests at minimum, 2:3 ideally
      + rust is pretty straight forward, built in as first class feature.
        * managerGlue
          - dedicated interop testing
          - mutation of state from rust
          - this is probably going to mocking
*** interop/ffi/interface
    - rust -> neon -> index.node -> yields an array of exports, i.e. ~register_module!~
    - managerGlue
      + pulls rust functions into script source, i.e. require
      + completely server side
      + browser does not support at current level
        * node has a virtual dom representation that browsers simply don't support
        * this is why node gets trans to strings, saved as asset/js,  and pulled into browser
*** TODO [0/2] action items
    - [ ] refine user stories generally
      + [ ] currently are epic-y, need to be more specific and decomposable
    - [ ] Generate acceptance criterions from new refinements + issues discussed in today's meeting
      + [ ] add as items to issues/sprint 2 board on GH
** meeting 2019.11.01 (tenth) (2 hr)
   - duration: 2 hours
   - Location: Miller Nichols Library
*** Agenda
     - updates on back-end
     - discuss change of server structure
     - code review
     - refinement user stories
     - refinement acceptance criteria
     - matching browser to server requirements
*** back-end updates
    - made a [[https://github.com/amadeusine/CS449GroupProject/issues/22][tracking issue]] on GH for all requirements of sprint2 with respect to back-end
    - consists of multiple tasks derived from acceptance criterion and user story relevant to
      game board
      + #23: align back-end types with front-end types due to requirement changes (DONE)
      + #28: add file reader utility (DONE)
      + #24: exporting rust types to js equivs (Nearly done)
      + #25: importing js types to rust equivs (TODO)
      + #26: game validation logic (#)
    - *NOTE about game movement*
      * No longer have PieceSwitch/PieceMove enums.
      * Instead, option will yield a player and a position
      * backend will know from gamestate whether this is a piece moving OUT or INTO a position
      * will check accordingly
*** server structure changes
    - Four changes coming out:
      1. break out static files from server
         - tightly coupled with server currently
         - as if local app
      2. adding 3 endpoints for:
         - logic
         - theme
         - setup: (reach stuff for sprint3)
      3. new structures and classes (issue #31)
         - client connection class
           + browser & networking validation
           + putting in place design necessary to allow program to be extended to client-client
             interactions
           + separation of game and web-server
         - onclick request (Browser side)
           + setup structure for binding between browser and server, 1:1
           + each event calls back to browser's main function for getRequest
             * send off payload to server, which sends to rust module export
         - browser needs its own board manager, separate from ManagerGlue
           + allows for state to be accepted on browser side
         - BoardReceptor (server)
           + scaffold for endpoint components
           + allows browser to hit endpoints/communicate with server
*** code review
    - documented in sprint2_writeup.org
*** matching browser-server reqs
    - Reference: server structure changes list item 3
    - triggers are sent from server to browser
      + new components are entered on display
        * menu item
        * removal of input during player's turn, on opponent
        * game over
        * restart
*** TODO
    - refinement (grooming) of US, AC, and tasks.
** meeting 2019.11.02 (11th) (2hr)
   - Duration: 2 hour
   - Location: Voice Chat
*** agenda
 - refactor server templating
 - add endpoints
 - revise UI
*** refactor server templating
     - board grid elements can be iterated
     - colors can be templated
     - tests can be separated
     - scripts can be separated
*** add endpoints
     - see last meeting (endpoint list)
     - logic receives payload, returns native response
     - BoardReceptor now implied, soon to be implemented (sprint #3)
     - error component templates on bad payload
*** revise UI
     - Figma for design mockups
     - Get menu bar up and running (Michael)
     - Reconfigure game site layout
     - information page?
*** TODO
     - add final endpoints for talkback
     - browser's `Window`/`Board` needs HTTP adhesion to server
     - design reconfiguration
** Meeting 2019.11.03 (12th)
   - Duration: 7 hour
   - Location: Voice Chat
*** agenda
    - Blitzing remaining issues
    - Blitzing documentation
*** Remaining Issues
    - Mocking final game logic with typescript
    - Adding tests
    - Definition of Done: Hit all story points that have been listed thus far.
*** Blitzing Documentation
    - Updating all tables
    - Fixing formatting on code review tables
    - Adding new meeting minutes
** meeting 2019.11.08 (13th)
   - Duration: 1 hour
   - Location: Miller Nichols Library
*** agenda
    - stubs
    - fix sprint 2 report
    - integration js x rust
*** stubs
    - (Sam): JS Integration Stubs will be written, PR
    - (Sam): Game logic compatibility between mock and rust, PR
      + checks logic between what is being tested out of rust and what is being mocked
      + See rust unit test code
    - Tests between client-server interaction
*** fix sprint 2 report
    - updated us/ac table statuses
    - added us stories for AI feature
*** integration
    - makefile/development script for building neon module then running server against it
    - semaphore CI for repo is up
    - adjust js functions to reflect naming scheme in exported module
    - integration (poll/get_curr_state functions) on event loop
*** TODO
    - add AC for AI
    - add descriptions for AI US
    - add impl tasks stubs to reflect stubs in stub section
    - (all things missed in sprint 2 docs)
    - diagram event loop

