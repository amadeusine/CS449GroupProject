#+TITLE: CS449 Sprint 1 Report
#+AUTHOR: Team \textbf{Misael's} Project Submission
#+SUBTITLE: Michael Cu, Elias Julian Marko Garcia, Samual Lim
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{array}

* Micro Charter
  :PROPERTIES:
  :CUSTOM_ID: S1
  :END:   
** Project Name
   :PROPERTIES:
   :END:
   N Men Morris
** Vision Statement
   :PROPERTIES:
   :END:
   Create a extensible framework for board game web apps with scalability and performance.
** Mission Statement
   :PROPERTIES:
   :END:
   To play Nine Men's Morris on the web browser using a composable web technology stack that allows
   for future modularity while not foregoing performance.
** Elevator Pitch and Business Value
   :PROPERTIES:
   :END:
   We are creating Nine Men's Morris on a board game framework using Express.js and Neon for
   Rust. This allows for a data and type safe application that is capable of composability,
   scalability, extensibility, and performance.
** Customers and Users
   :PROPERTIES:
   :END:
   - Customers: Entrepreneurs and ventures that want to deploy board games on the web with low
     overhead, latency, and maintenance.
   - Users: Individuals who are passionate about board games and want a new online experience that
     they can take and play wherever they go with their friends.
** Metrics
   :PROPERTIES:
   :END:
   By benchmarking N Men Morris, we can compare our solution to other products on the market on:
   1. latency
   2. binary size
   3. up-time
** Milestones
   :PROPERTIES:
   :END:
   1. First MVP
   2. First Offline N Men's Morris
   3. Player versus Player (Offline)
   4. Player versus Player (Online)
** Risks
   :PROPERTIES:
   :END:
   1. Inherent complexity of technology stack.
   2. Inability to cooperate with teammates.
   3. Plausibility of orphaning project due to development team size.
** Authors
   :PROPERTIES:
   :END:
   - Michael Cu
   - Elias Julian Marko Garcia
   - Samual Lim
* User Stories
  :PROPERTIES:
  :CUSTOM_ID: S2
  :END:

  Below you will find a table that makes up our "User Story Board", with some simplifications taken
  with respect to the total contents of the board. With respect to the final formal documentation,
  i.e. this paper, we only keep the basic qualitative and quantitative values for each story in the
  table while giving each user story proper its own section. This makes documenting each story
  less unruly while also easier to read. Each Story I.D. (SID) value is internally linked to its
  respective story, which also helps with navigating this section.
  
   #+ATTR_LaTeX: :align |c|m{3.5cm}|c|c|c|c|m{2.0cm}|
   |     |                        |          | Time Est. | Actual |        |                     |
   | SID | Story Name             | Priority |      (hr) | (hr)   | Status | Developer(s)        |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID1][S1]]  | Default Board Layout   | high     |        10 | 4      | DONE   | Sam, Michael, Elias |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID2][S2]]  | Mills Board            | high     |        10 | 4      | DONE   | Sam                 |
   |     | Coordinate System      |          |           |        |        |                     |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID3][S3]]  | Player Selection       | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID4][S4]]  | Piece Assignment       | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID5][S5]]  | Game Menu Prompt       | high     |        10 | 2      | TODO   | Sam, Michael        |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID6][S6]]  | Start Game Prompt      | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID7][S7]]  | Player Turn Assignment | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID8][S8]]  | Position Selection     | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID9][S9]]  | Position Placement     | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID10][S10]] | Position Movement      | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID11][S11]] | Elimination Movement   | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID12][S12]] | Mill Definition        | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID13][S13]] | Mill Attack Attribute  | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID14][S14]] | Mill Defense Attribute | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID15][S15]] | Mill Piece Movement    | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID16][S16]] | Elimination with Mills | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID17][S17]] | Flying Definition      | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID18][S18]] | Flying Piece Ability   | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID19][S19]] | End Game: Loss         | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID20][S20]] | End Game: Win          | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID21][S21]] | End Game: Tie          | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID22][S22]] | Reset Board            | medium   |        10 | -      | TODO   | -                   |
   |-----+------------------------+----------+-----------+--------+--------+---------------------|
   | [[#SID23][S23]] | Start New Game         | medium   |        10 | -      | TODO   | -                   |
   
** Default Board Layout
   :PROPERTIES:
   :CUSTOM_ID: SID1
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need a game board with 4 expanded squares, each with 8 equidistant positions, to
    play a game of Nine Men's Morris.
** Mills Board Coordinate System
   :PROPERTIES:
   :CUSTOM_ID: SID2
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need a way to navigate and read the board to play a game of Nine Men's Morris.
** Player Selection
   :PROPERTIES:
   :CUSTOM_ID: SID3
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    As a user, I want to choose a distinct color for my player.

** Piece Assignment
   :PROPERTIES:
   :CUSTOM_ID: SID4
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to receive 9 distinct pieces to place on the board.
** Game Menu Prompt
   :PROPERTIES:
   :CUSTOM_ID: SID5
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I am prompted with a GUI that shows the game board along with menu items.

** Start Game Prompt
   :PROPERTIES:
   :CUSTOM_ID: SID6
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need a GUI to prompt me with the options to start a game with either another human
    or against the computer.
** Player Turn Assignment
   :PROPERTIES:
   :CUSTOM_ID: SID7
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to receive either the first or second player's move at the beginning of the game.
** Position Selection
   :PROPERTIES:
   :CUSTOM_ID: SID8
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need to be able to select an empty position to choose it for piece placement.

** Position Placement
   :PROPERTIES:
   :CUSTOM_ID: SID9
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need to be able to place a piece on an empty position to finish my turn.

** Position Movement
   :PROPERTIES:
   :CUSTOM_ID: SID10
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to be able to move my pieces to unoccupied positions.

** Elimination Movement
   :PROPERTIES:
   :CUSTOM_ID: SID11
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    
    As a user, I want to be able to move my pieces into enemy positions should I qualify.

** Mill Definition
   :PROPERTIES:
   :CUSTOM_ID: SID12
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need the game to recognize when three of my pieces are placed in adjacent positions in order to form a mill.

** Mill Attack Attribute
   :PROPERTIES:
   :CUSTOM_ID: SID13
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    As a user, I need the ability to eliminate an enemy piece to attack as a player.

** Mill Defense Attribute
   :PROPERTIES:
   :CUSTOM_ID: SID14
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need pieces within a recognized mill to be immune from elimination to defend as a
    player.

** Mill Piece Movement
   :PROPERTIES:
   :CUSTOM_ID: SID15
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to move pieces that make up mills into any position not occupied by one of my
    other pieces.

** Elimination With Mills
   :PROPERTIES:
   :CUSTOM_ID: SID16
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want my pieces to remove opponent pieces from the board individually.

** Flying Definition
   :PROPERTIES:
   :CUSTOM_ID: SID17
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need the game to recognize when I have less than 4 pieces to gain the ability to
    "fly" my pieces.

** Flying Piece Ability
   :PROPERTIES:
   :CUSTOM_ID: SID18
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I need the ability to move a piece to any empty position on the map when I only have
    3 pieces to fly.
    
** End Game: Loss
   :PROPERTIES:
   :CUSTOM_ID: SID19
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, the game must recognize when I reach less than 3 pieces to declare me a loser.
    
** End Game: Win
   :PROPERTIES:
   :CUSTOM_ID: SID20
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, the game must recognize when my opponent reaches less than 3 pieces to declare me the
    winner.

** End Game: Tie
   :PROPERTIES:
   :CUSTOM_ID: SID21
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, the game must recognize when the board state has repeated the same layout N times
    after a player has reached less than 4 players in order to declare the game a tie ("Remis").

** Reset Board
   :PROPERTIES:
   :CUSTOM_ID: SID22
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to be able to restart a game with a new, empty board.
    
** Start New Game
   :PROPERTIES:
   :CUSTOM_ID: SID23
   :END:
*** Description
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    As a user, I want to be able to start a new game with the default configuration as before I started the game.
    
* Acceptance Criteria
  :PROPERTIES:
  :CUSTOM_ID: S3
  :END:

  The following section covers the acceptance criteria enumerated in response to the User Stories
  discovered and documented in [[#S2][$\S{2}$]]. In a similar fashion to $\S{2}$, the table documenting these
  acceptance criteria is in a simplified form. Every Acceptance Criterion has an Acceptance
  Criterion ID (=ACID=), which is associated in the table below with its respective =SID=, development
  status, and the developers responsible for implementing it. Each =ACID= is linked to its respective
  subsection below for viewing the description of each criterion.

   #+ATTR_LaTeX: :align |l|c|c|c|
   | SID & Name                   | ACID | Status | Developer(s)        |
   |------------------------------+------+--------+---------------------|
   | [[#SID1][S1]] Mills Board               | [[#ACID1][A1]]   | DONE   | Sam, Elias, Michael |
   |------------------------------+------+--------+---------------------|
   | [[#SID2][S2]] User Input and Selection  | [[#ACID2][A2]]   | DONE   | Sam, Elias, Michael |
   |------------------------------+------+--------+---------------------|
   | [[#SID3][S3]] Starting a Game           | [[#ACID3][A3]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID4][S4]] Assigning Players         | [[#ACID4][A4]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID5][S5]] Piece Placement           | [[#ACID5][A5]]   | DONE   | Sam, Michael        |
   |------------------------------+------+--------+---------------------|
   | [[#SID6][S6]] Piece Movement            | [[#ACID6][A6]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID7][S7]] Mill Formation            | [[#ACID7][A7]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID8][S8]] Piece Elimination         | [[#ACID8][A8]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID9][S9]] Flying Pieces             | [[#ACID9][A9]]   | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID10][S10]] Defining End Game        | [[#ACID10][A10]]  | TODO   | -                   |
   |------------------------------+------+--------+---------------------|
   | [[#SID11][S11]] Restarting/Replaying     | [[#ACID11][A11]]  | TODO   | -                   |
   | $\hspace{0.4cm}$ Game        |      |        |                     |

** Criterion 1
   :PROPERTIES:
   :CUSTOM_ID: ACID1
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   | ACID | Description                                                                |
   |------+----------------------------------------------------------------------------|
   |  1.0 | Given a User...                                                            |
   |------+----------------------------------------------------------------------------|
   |  1.1 | When the User visits our site (IP), then an interactive board will appear. |
   |      |                                                                            |
   |  1.2 | When the User does not visit our site (IP), our board will not appear.     |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 2
   :PROPERTIES:
   :CUSTOM_ID: ACID2
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   | ACID | Description                                                            |
   |------+------------------------------------------------------------------------|
   |  2.0 | Given a User using the application...                                  |
   |------+------------------------------------------------------------------------|
   |  2.1 | When a user clicks on an interactive button of the application's page, |
   |      | then the application will detect the user input event.                 |
   |      |                                                                        |
   |  2.2 | When a user clicks on a non-interactive button of the application's    |
   |      | page, then the application will not detect any input.                  |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 3
   :PROPERTIES:
   :CUSTOM_ID: ACID3
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  3.0 | Given a User using the application...                                   |
   |------+-------------------------------------------------------------------------|
   |  3.1 | When a user enters HUMAN as an opponent, then the application will      |
   |      | allow for a second human player.                                        |
   |      |                                                                         |
   |  3.2 | When a user enters AI as an opponent, then the application will assign  |
   |      | an AI as a second player.                                               |
   |      |                                                                         |
   |  3.3 | When a user chooses neither a HUMAN or AI as an opponent then the       |
   |      | application will not choose and will re-prompt the user to choose an    |
   |      | opponent type.                                                          |
   #+TBLFM: 

*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 4
   :PROPERTIES:
   :CUSTOM_ID: ACID4
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  4.0 | Given a User using the application...                                   |
   |------+-------------------------------------------------------------------------|
   |  4.1 | When a user chooses player one, then the application will assign the    |
   |      | role of player one to the user.                                         |
   |      |                                                                         |
   |  4.2 | When a user chooses player 2, then the application will assign the      |
   |      | role of player two to the user.                                         |
   |      |                                                                         |
   |  4.3 | When a user chooses neither player one or player two then the           |
   |      | application will not will not assign a player and the player will       |
   |      | be re-prompted                                                          |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    
    None for now.

** Criterion 5
   :PROPERTIES:
   :CUSTOM_ID: ACID5
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |       | <71>                                                                    |
   |  ACID | Description                                                             |
   |-------+-------------------------------------------------------------------------|
   | 5.1.0 | Given a User playing a game with unassigned pieces...                   |
   |-------+-------------------------------------------------------------------------|
   | 5.1.1 | When the user enters an unoccupied position, then a piece of the users  |
   |       | color will be placed in the position.                                   |
   |       |                                                                         |
   | 5.1.2 | When the user enters an occupied position, a piece of the users color   |
   |       | will not be placed in the position.                                     |
   |-------+-------------------------------------------------------------------------|
   | 5.2.0 | Given a User playing a game with no unassigned pieces...                |
   |-------+-------------------------------------------------------------------------|
   | 5.2.1 | When the user enters an unoccupied position, then a piece of the users  |
   |       | color will not be placed in the position.                               |
   |       |                                                                         |
   | 5.2.2 | When the user enters an occupied position, then a piece of the users    |
   |       | color will not be placed in the position.                               |

   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
   
    None for now.

** Criterion 6
   :PROPERTIES:
   :CUSTOM_ID: ACID6
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  6.0 | Given a user playing the game during their turn...                      |
   |------+-------------------------------------------------------------------------|
   |  6.1 | When the user moves his piece to an unoccupied position not adjacent    |
   |      | to an opponent mill, then the piece will be shifted.                    |
   |      |                                                                         |
   |  6.2 | When the user moves his piece to an occupied position not adjacent to   |
   |      | an opponent mill, then the piece will not be shifted.                   |
   |      |                                                                         |
   |  6.3 | When the user moves his piece to an unoccupied position, adjacent to    |
   |      | an opponent mill, then the  piece will not be shifted.                  |
   |      |                                                                         |
   |  6.4 | When the user moves his piece to an occupied position, adjacent to an   |
   |      | opponent mill, then the  piece will not be shifted.                     |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 7
   :PROPERTIES:
   :CUSTOM_ID: ACID7
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  7.0 | Given a User is playing their turn...                                   |
   |------+-------------------------------------------------------------------------|
   |  7.1 | When the user places a piece in a valid position adjacent to two other  |
   |      | pieces of their color, then a mill will be formed.                      |
   |      |                                                                         |
   |  7.2 | When the user places a piece in an invalid position adjacent to two     |
   |      | other pieces of their color, then a mill will not be formed.            |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 8
   :PROPERTIES:
   :CUSTOM_ID: ACID8
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  8.0 | Given a User is playing their turn...                                   |
   |------+-------------------------------------------------------------------------|
   |  8.1 | When the user moves a piece from his mill into an opponent's piece not  |
   |      | in a mill, the opponent's piece will be replaced by the user's piece.   |
   |      |                                                                         |
   |  8.2 | When the user moves a piece from his mill into an opponent's            |
   |      | piece in a mill, the opponent's piece will be not replaced by           |
   |      | the user's piece.                                                       |
   |      |                                                                         |
   |  8.3 | When the user moves a piece from his mill into a vacant                 |
   |      | space, no opponent's piece will be replaced by the user's piece.        |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 9
   :PROPERTIES:
   :CUSTOM_ID: ACID9
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   |  9.0 | Given a User is playing their turn...                                   |
   |------+-------------------------------------------------------------------------|
   |  9.1 | When the user loses a piece such that they only have three pieces       |
   |      | remaining on the board, then the application will allow them to "fly"   |
   |      | their pieces to any open and valid position on the board.               |
   |      |                                                                         |
   |  9.2 | When the user loses a piece such that they have more than three pieces  |
   |      | remaining on the board, then the application will not allow them to     |
   |      | "fly" their pieces to any open and valid position on the board.         |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 10
   :PROPERTIES:
   :CUSTOM_ID: ACID10
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   | 10.0 | Given a User is playing their turn...                                   |
   |------+-------------------------------------------------------------------------|
   | 10.1 | When the user eliminates an opponent's pieces down to two pieces,       |
   |      | then the user wins.                                                     |
   |      |                                                                         |
   | 10.2 | When the user's pieces are eliminated down to two pieces,               |
   |      | then the user loses.                                                    |

*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.

** Criterion 11
   :PROPERTIES:
   :CUSTOM_ID: ACID11
   :END:
   #+ATTR_LaTeX: :align |c|p{12.0cm}|
   |      | <71>                                                                    |
   | ACID | Description                                                             |
   |------+-------------------------------------------------------------------------|
   | 11.0 | Given a user after they have completed a game...                        |
   |------+-------------------------------------------------------------------------|
   | 11.1 | When the user chooses to play again, then the board will be reset and   |
   |      | game count incremented.                                                 |
   |      |                                                                         |
   | 11.2 | When the user chooses not to play again, then the board will not be     |
   |      | reset and game count not incremented.                                   |
   
*** Further Notes
    :PROPERTIES:
    :UNNUMBERED: t
    :END:

    None for now.
* Code Review
   #+ATTR_LaTeX: :align |l|c|c|
   | Checklist         | Item                                | Findings                                                                                                                                                                                                                                                                                                                                |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | Coding Standards  |                                     |                                                                                                                                                                                                                                                                                                                                         |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   |                   | Naming Conventions                  | All naming conventions link directly to their use case and structs have compact naming systems relating to their purpose or game identity. This relates heavily to game component system design patter, i.e. ECS                                                                                                                        |
   |                   | Argument ordering                   | Rust's formal parameter argument ordering is strict, i.e. the order of arguments cannot vary between calls for the same method. For JavaScript equivalent, same restrictions apply due to conversion.                                                                                                                                   |
   |                   | Comments                            | Commenting could be improved by adding clarity in areas that handle pattern matching on handling of board inputs and conversions. No verbose comments and existing comments are well placed.                                                                                                                                            |
   |                   | Code Style                          | Rustc comes with a component called Rustfmt that automatically formats code upon save to keep a consistent style across the codebase inline with Rust code formatting standards. Javascript is compliant with ES6 Lint.                                                                                                                 |
   |                   | Indentation                         | See above for answer. Both handled by linters provided.                                                                                                                                                                                                                                                                                 |
   |                   | ...                                 |                                                                                                                                                                                                                                                                                                                                         |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | Design Principles |                                     |                                                                                                                                                                                                                                                                                                                                         |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   |                   | Abstraction and Interfaces          | Due to ECS, each component has high cohesion and loose coupling natively. Each entity as defined in the rust module is single purpose, and is incrementally composed from smaller entities defined for the game. Js mimics this, with abstraction mostly occurring in the module. Browser interactions make for event based components. |
   |                   | Proper Encapsulation                | JS x Rust interop makes for high modularity within types and their methods. Only that which is necessary to be exposed publicly is exposed as such, and FFI wrappings enforce a minimally exposed API to the server for handling game logic.                                                                                            |
   |                   | Command Query Separation Princ.     | JS calls to rust module's methods, which in turn have a minimal API exposed through Manager. Manager, in turn, only have mutators or accessors for its private GameState object. These call to GameState itself through basic getters and setters.                                                                                      |
   |                   | Design by Contract                  | The strict typing over the possible game states representable allow for exhaustive matching over the game variants. The JS poll's input objects are strict to their parameters passed to Rust.                                                                                                                                          |
   |                   | - If so, reasonable pre/post conds? | Yes. The typing models the domain space so we can keep track of pre/post conditions at an abstract level.                                                                                                                                                                                                                               |
   |                   | Open Closed Princ.                  | JS can directly inherit class models from Rust, extending their functionality while not disturbing native code and implementation logic. This allows for modification of input logic while the game logic remains consistent and unaffected by irrelevant mutation.                                                                     |
   |                   | Single Responsibility Princ.        | Due to our usage of the ECS design model/pattern, our classes, structure, and types, both in JS and Rust, are highly cohesive yet maintain individual responsibility for their logic.                                                                                                                                                   |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | Code Smells       |                                     |                                                                                                                                                                                                                                                                                                                                         |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   |                   | Magic Numbers                       | None.                                                                                                                                                                                                                                                                                                                                   |
   |                   | Unnecessary Globals/Class vars      | None.                                                                                                                                                                                                                                                                                                                                   |
   |                   | Duplicate Code                      | Due to the nature of entity component systems (ECS), which our program uses as a design pattern for the game, there are no instance of duplication, only interactions with types.                                                                                                                                                       |
   |                   | Long Methods                        | None.                                                                                                                                                                                                                                                                                                                                   |
   |                   | Long parameter list                 | None, due to ECS.                                                                                                                                                                                                                                                                                                                       |
   |                   | Over-complex expression             | None.                                                                                                                                                                                                                                                                                                                                   |
   |                   | Unnecessary Branching               | None, where branching occurs through match statements, it is exhaustive of the game state without being enumerable.                                                                                                                                                                                                                     |
   |                   | Bad method/variable naming          | None, see Coding Standards: Naming Conventions.                                                                                                                                                                                                                                                                                         |
   |                   | Similar methods in other classes    | None, due to ECS.                                                                                                                                                                                                                                                                                                                       |
   |                   | ...                                 |                                                                                                                                                                                                                                                                                                                                         |
   |-------------------+-------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|



   | Bugs | Status | buggy code snippet | bug summary                                                                        | bug logic                                                                                                                   |
   |------+--------+--------------------+------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------|
   | #1   | Fixed  | ~calcPlayer(1)~      | The board text displays the player who last played as the current player.          | Is nullified by the piecesLeft decrement that precedes it, resulting in referring to the previous colour as the new colour. |
   | #2   | Fixed  | ~pub fn poll~        | Manager's hidden gamestate moves instead of copy/clone when using basic accessors. | Ownership defined for accessors in GameState resulted in unnecessary moves of Manager's hidden Gamestate                    |
   |      |        |                    |                                                                                    |                                                                                                                             |
   |------+--------+--------------------+------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------|

* Implementation Tasks
  :PROPERTIES:
  :CUSTOM_ID: S4
  :END:

  This section summarizes the details of implementation tasks for the project. You will find in each
  subsection a table similar to those found in [[#SID2][$\S{2}$]] and [[#SID3][$\S{3}$]].

** Summary of Production Code

   #+ATTR_LaTeX: :align |p{4.5cm}|c|p{3.5cm}|p{4.5cm}|c|
   |                            |          | Class         |        |
   | SID & Name                 | ACID     | Name(s)       | Status |
   |----------------------------+----------+---------------+--------|
   | 2 User Input and Selection | 2.1, 2.1 | [[#PID1][Window, Board]] | Done   |

*** Class =Window=, =Board=
    :PROPERTIES:
    :CUSTOM_ID: PID1
    :END:

    #+ATTR_LaTeX: :align |l|l|
    |               | <71>                                                                    |
    | Method        | Notes                                                                   |
    |---------------+-------------------------------------------------------------------------|
    | 1. =eventPress= | These functions relate to a pseudo-epic, and thus the testing will be   |
    | 2. =at=         | generic.                                                                |
    |               |                                                                         |
    
** Automated Test Code

   There were no automated tests for this sprint.

   #+ATTR_LaTeX: :align |l|l|p{2.5cm}|p{2.5cm}|p{2.5cm}|l|l|
   |            |      | Class   | Method  |             |        |           |
   | SID & Name | ACID | Name(s) | Name(s) | Description | Status | Developer |
   |------------+------+---------+---------+-------------+--------+-----------|
   |            |      |         |         |             |        |           |
** Manual Test Code   
   #+ATTR_LaTeX: :align |p{4.5cm}|c|c|c|p{3.0cm}|
   |                             |        |      |        |                 |
   | SID & Name                  | ACID   | MTID | Status | Developer(s)    |
   |-----------------------------+--------+------+--------+-----------------|
   | [[#SID2][S2]] User Input and Selection | [[#ACID2][A2.1]]   | [[#MTID1][M1]]   | DONE   | Samuel, Michael |
   | [[#SID2][S2]] User Input and Selection | [[#ACID2][A2.2]]   | [[#MTID2][M2]]   | DONE   | Samuel, Michael |
   | [[#SID5][S5]] Piece Placement          | [[#ACID5][A5.1.1]] | [[#MTID3][M3]]   | DONE   | Samuel, Michael |
   | [[#SID5][S5]] Piece Placement          | [[#ACID5][A5.1.2]] | [[#MTID4][M4]]   | DONE   | Samuel, Michael |
   | [[#SID5][S5]] Piece Placement          | [[#ACID5][A5.2.1]] | [[#MTID5][M5]]   | DONE   | Samuel, Michael |
   | [[#SID5][S5]] Piece Placement          | [[#ACID5][A5.2.2]] | [[#MTID6][M6]]   | DONE   | Samuel, Michael |
*** Manual Test 1
    :PROPERTIES:
    :CUSTOM_ID: MTID1
    :END:

    #+ATTR_LaTeX: :align |p{6.0cm}|p{4.0cm}|p{3.0cm}|
    | Test Input            | Test Oracle        | Notes                        |
    |-----------------------+--------------------+------------------------------|
    | document              | function onclick() | Checks if element clickable. |
    | .getElementById("A1") |                    |                              |
    | .onclick              |                    |                              |

*** Manual Test 2
    :PROPERTIES:
    :CUSTOM_ID: MTID2
    :END:

    #+ATTR_LaTeX: :align |p{6.0cm}|p{4.0cm}|p{3.0cm}|
    | Test Input                   | Test Oracle | Notes                        |
    |------------------------------+-------------+------------------------------|
    | document                     | "undefined" | Checks if element clickable. |
    | .getElementById("container") |             |                              |
    | .onclick                     |             |                              |

*** Manual Test 3
    :PROPERTIES:
    :CUSTOM_ID: MTID3
    :END:

    #+ATTR_LaTeX: :align |p{4.0cm}|p{6.0cm}|p{3.0cm}|
    | Test Input | Test Oracle                | Notes                                |
    |------------+----------------------------+--------------------------------------|
    | "A1"       | elem.style.backgroundColor | This is a GUI test.                  |
    |            | !== undefined              |                                      |
    |            |                            | GUI will show piece placed in bottom |
    |            |                            | left corner.                         |

*** Manual Test 4
    :PROPERTIES:
    :CUSTOM_ID: MTID4
    :END:

    #+ATTR_LaTeX: :align |p{2.0cm}|p{8.0cm}|p{3.0cm}|
    | Test Input | Test Oracle                                  | Notes                                |
    |------------+----------------------------------------------+--------------------------------------|
    | "A1", "A1" | "elem.style.backgroundColor === previousColor" | This is a GUI test.                  |
    |            |                                              |                                      |
    |            |                                              | GUI will show piece placed in bottom |
    |            |                                              | left corner.                         |
*** Manual Test 5
    :PROPERTIES:
    :CUSTOM_ID: MTID5
    :END:

    #+ATTR_LaTeX: :align |p{4.0cm}|p{6.0cm}|p{3.0cm}|
    | Test Input | Test Oracle             | Notes                                |
    |------------+-------------------------+--------------------------------------|
    | "D6"       | "board === previousBoard" | This is a GUI test.                  |
    |            |                         |                                      |
    |            |                         | GUI will show piece placed in bottom |
    |            |                         | left corner.                         |
*** Manual Test 6
    :PROPERTIES:
    :CUSTOM_ID: MTID6
    :END:

    #+ATTR_LaTeX: :align |p{4.0cm}|p{6.0cm}|p{3.0cm}|
    | Test Input | Test Oracle             | Notes                                |
    |------------+-------------------------+--------------------------------------|
    | "A1"       | "board === previousBoard" | This is a GUI test.                  |
    |            |                         |                                      |
    |            |                         | GUI will show piece placed in bottom |
    |            |                         | left corner.                         |
** Other Manual Test Code

   There were no other manual tests for this sprint.

   #+ATTR_LaTeX: :align |c|c|c|c|c|c|c|
   |    |            |          |       |             |        |           |
   |    |            | Expected | Class | Method Name |        |           |
   | ID | Test Input | Result   | Name  | of Test     | Status | Developer |
   |----+------------+----------+-------+-------------+--------+-----------|
   |    |            |          |       |             |        |           |

* Meeting Minutes
  :PROPERTIES:
  :ALT_TITLE: Meeting Minutes
  :APPENDIX: t
  :CUSTOM_ID: S5
  :END:
** Meeting 2019.09.04
   - Duration: 1 Hour
   - Location: Miller Nichols Library
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - going over project pdf as group
      - discussing tech stack
      - going over sprint assignments
      - going over normal assignments
    - discussing the actual structure of sprint 1
      - requirements
      - user stories
      - what submission might look like
      - discussion of who gets to do what
      - discussion of when to meet, general availability
        - Sam will be gone from 9th through 19th
        - Elias will be gone through the 12th - 14th
*** project 1 report 
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - want to get scrum documentation done
    - get general idea down by end of this friday (2019.09.06)
      - structure of the project
      - how to use the frameworks/libraries involved (personal research/reading
        per individual)
        - Neon for rust
        - node.js
        - potentially express.js
    - generating cards, user stories
** Meeting 2019.09.06
   - Duration: 1 Hour
   - Location: Miller Nichols Library
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - discussing game rules
    - discussing/writing user stories
    - discussing tooling
    - discussing design
*** Game Rules
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - watched a video demo'ing the game
    - discussed/clarify mechanics
      - whether or not to include coin flip
      - terms of loss
      - flying mechanic
*** User stories
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - elias wrote user stories in a new org mode file called kanban.org on the
      repository
    - discussed problem of documentation given requirements from the pdf for
      sprint 1
    - discussed alternative means of documenting, carrying out execution of our
      cards for the project
*** Tooling & Design
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - did not achieve agenda, did not get to these topics because of the time
      it took to discuss our epics/user stories.
*** TODO 
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - [ ] discuss tooling
      + need to finalize what our stack will look like and frameworks to be
         used.
      + elias has experimented with Neon and reports that it works well, seems
         viable for the product.
    - [ ] discuss design
      + need to discuss how the actual product will be packaged and its
         architecture.
** Meeting 2019.09.27
   - Duration: 1 Hour, 30 minutes
   - Location: Miller Nichols Library
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - discuss project structure
    - acceptance criteria
    - work assignment
    - remaining TODOs
*** Project Structure
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - express.js has a lot of dependencies, only really need connect.js
      + might try just using connect.js, which would be a lot simpler
      + will continue with using Neon
    - board
      + gui
        - js renders the fontend
        - logic/data is all handled on back
      + data structure/representation
        + two choices:
          1. one big board object that includes methods for both resolving where players are *and*
             where things like mills are
          2. two object entities, one is purely for the GUI (tracking positions on the board), the
             other would be some kind of graph structure that allows position nodes to check peers
             for occupation and whether it is the same or opposing players
      + movement and move validity
        - need to track flying
          + proposition: flying is a universal property, merely constrained until player count is
            reduced.
            - need some kind of getter/setter between board and entity management system
          + mill detection
            - if going with entity system, would merely be a graph traversal from any given node
            - another idea: create a mill entity system that tracks active mills and checks each
              mill upon each turn(?) and modifies or destroys the mill as necessary.
              + could save a lot of checking
              + as for organization/logical membership, would keep such a mill entity system
                independent of other objects in the system for simplicity, at least for now.
          + Checking for attack
            - if a mill entity system is used, we natively have a means to detect valid attacks. so
              long as the node is not in one of the mills, do not attack *unless* all available
              nodes are in mills.
      + game driver
        - Will have some kind of Game entity/manager object that drives the game event loop.
          + will take inputs from players, run them as game moves
            + however, internal logic to the entity management system is what will ultimately validate moves
            + game manager will have no logic for why this happens, only passes back and for game
              inputs and the results of moves.
          + consequentially, need to codify where and how game validation logic happens
      + validation logic
        - as of now, think it will be handled by the main entity management system
        - will have a set of logic checking methods defined over the system that verify whether a
          given move is allowed
*** Acceptance Criteria
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - realized we need to add numbering to the board GUI (a-g, 1-7)
    - (deferred, Sam will begin working on before next meeting)
*** Work Assignment
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - elias will begin on exploratory work for the backend (board, entity management, etc)
    - sam, michael will begin exploratory work for the frontend (GUI, communicating with backend)
*** TODO
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - [ ] kanban board setup, finalization of workflow for documentation
      + can probably just use github for real time management, but keep organizational and notes in
         =kanban.org= file on the repo.
    - [ ] defining test cases for stories and acceptance criteria
    - [ ] refining stories
      + same case applies with above: refine stories, and put them on github's project management
         board accordingly; actual refinement can be delegated to within =kanban.org= file.
** Meeting 2019.10.02
   - Duration: 1 Hour, 40 Minutes
   - Location: Miller Nichols Library
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - addressing tagged issues generated on GitHub
    - settling on how front-end talks to back-end
    - documentation/design stuff
*** Issues on GitHub
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
**** issue #3: determine communication channel between js and rust
     - event polling seems overkill for what we need
     - even handler on front-end which speaks to an entity ManagerGlue, which will be the JS that
       talks to rust backend
       + There will be a manager in the back-end, which will generate game state, and return that to
         the front-end
       + back-end will also have triggers (flags? Enums?) which signal to front-end when certain
         actions are no longer needed or valid, i.e. button inputs or game state continuation
     - JSON seems like a good enough medium for message passing between front and back components
***** issue #4 is largely tagged to #3, so this resolves that
      - =State=: Input Handle + BoardStruct + Trigger)
      - =BoardState=
        + this is what gets sent back to the JS
        + 1D array of the =State= struct
          - this array will be handed off as a NeonJS object, whatever it's called in neon
          - 
**** issue #6: Front-end/GUI Skeleton, Basic Design
     1. Neon builds a node module
     2. This is sent to express.js
        - accepts it as a bunch of js functions
     3. Express takes this, as a bunch of objects, and then saves as strings to JS files, in turn
        statically served to end user (i.e. browser)
        - express.js interaction is a one-off affair
     4. Stretch goal: being able to set different themes on the front-end
**** issue #8: CI/CD
     - GitHub has native CI/CD now via it's Action's service.
     - can impl for both Rust and Node.js
*** TODO
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - [ ] Design docs(?)
      + at least 3 needed:
        1) event diagram
        2) general UML diagram for total project
        3) class hierarchy/component diagram
** Meeting 2019.10.03
   - Discord: 1 Hour, 53 Minutes
   - Location: Video Call
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - how to branch
     - branching basic_gui
     - GitHub PR format
     - styling format
*** GitHub PR format
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - Show Michael how to create a branch
     - name the branch and pull from remote
     - push the branch from local
     - sync branches
     - checkout a branch
*** Branching =basic_gui=
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - created a branch =basic_gui=
     - set up an issue with the branch for PR
     - push a commit from local to remote branch
*** GitHub PR format
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - went through how to form a PR from different branches
     - how to further commit to the compare branch
*** Styling Format
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - no bootstrap, no jquery
     - setup proper layouts for the GUI
     - discussed how we want to handle events onclick
*** TODO
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - push scaffolds for the website GUI
     - handle basic logic for pushing items to back-end storage
     - create mock of Rust functionality in TypeScript for further discussion
** Meeting 2019.10.05
   - Duration: 1 Hour, 16 Minutes
   - Location: Video Call
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - CSS Grid
     - SASS
     - TypeScript
     - build script compilation and runtime
     - proper layout for GUI
*** CSS Grid
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - teach Michael about CSS Grid
     - pure CSS, not bootstrap (Elias)
     - use columns properly
     - no need for floats / flexbox
*** SASS
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - transpiler for CSS
     - allows nested functionality
     - separate compiled/uncompiled folders
     - use =watch= script to sync changes
*** TypeScript
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - better able to handle equivalence mocking to Rust
     - easy to push onto browser
     - separate folders (see above)
     - push to public folder for site access
*** Build Script Compilation and Runtime
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - use watch and start scripts to build site
     - separate scripts will be run for Rust beforehand
     - build scripts allow for synced changes between folders (see above)
*** Proper Layout for GUI
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - use column areas in CSS Grid
     - main column for game
     - nested grid for board layout (tentative)
     - proportion text for board side-by-side
*** TODO
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
     - design docs
     - microcharter
     - mocking TS => Rust
     - event keys on front-end (browser)
** Meeting 2019.10.06
   - Duration: 7 hours
   - Location: Video Call
*** Agenda
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - Tying up loose ends with respect to documentation and write up
    - Tying up loose ends with respect to UI/JS end of the application
    - Discussing what is left to do with the project
*** Documentation and Write-up
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - Figured out how to format the tables given that many of the ones provided do not play well
      with latex/org-mode markdown
    - Similarly, decided on how to interconnect documentation components between sections
    - Discussed the remaining things left undocumented, particularly pair ratings.
*** UI/JS Loose Ends
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - Complete manual testing of interacting elements
    - Finalize positions of clickable elements on the board grid.
    - Alternating player logic for placement of pieces.
    - Limiting piece placement to nine.
*** Discussing Future Sprint/Direction of Project
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
    - Current User Stories are pseudo-Epics and need to be refined into better User stories aside
      from [[#SID1][S1]]. As they stand, discussing the current user stories makes for overly generic/abstract
      discussion and doesn't meaningfully translate into logic/behavior to implement and actual
      engineering tasks.
    - Currently, the front end mocks all of the behavior/functionality that would otherwise be
      provided by the backend. In sprint 2, this is where the real meat of programming will come in
      as we learn to make the back-end and front-end interface, particularly with translating data
      types across the FFI boundary through Neon.
    - We need to improve the current state documentation massively.
      + Design diagrams.
      + Docstrings across software code base.
      + Event diagrams.
    - Translate the above issues into their proper documentation for the master documentation and
      write-up file
    - How to test more of the functionality given that a major component of this application is
      running directly on the browser.
* Team Ratings

  Submission document does not specify scale, so it is assumed out of 5 with 1 being "Worst" and 5
  being "Excellent".

  #+ATTR_LaTeX: :align |c|c|c|c|
  |---------------------------+---------------------------+---------------+---------------------|
  |                           | Elias Julian Marko Garcia | Michael Sy Cu | Samuel Chia Ern Lim |
  |---------------------------+---------------------------+---------------+---------------------|
  | Elias Julian Marko Garcia |                         - |             5 |                   5 |
  |---------------------------+---------------------------+---------------+---------------------|
  | Michael Sy Cu             |                         5 |             - |                   5 |
  |---------------------------+---------------------------+---------------+---------------------|
  | Samuel Chia Ern           |                         5 |             5 |                   - |
  |---------------------------+---------------------------+---------------+---------------------|
  | Average                   |                         5 |             5 |                   5 |
  |---------------------------+---------------------------+---------------+---------------------|


